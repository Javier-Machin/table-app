{"version":3,"sources":["store/reducers/pets.js","store/reducers/index.js","constants/index.js","helpers/index.js","store/actions/index.js","components/TableRow.js","components/Table.js","containers/Table.js","App.js","serviceWorker.js","index.js"],"names":["initialState","data","lastFetchedPet","rootReducer","combineReducers","pets","state","action","type","dummyData","i","rowNumber","push","id","value","generateDummyData","fetchPets","start","amount","slice","preserveStore","fetchPetsData","memo","pet","handleRowOnchange","className","rows","onChange","name","defaultValue","props","actions","tableRef","createRef","useEffect","handleInfiniteScroll","callback","delay","timeOut","call","this","setTimeout","throttle","current","scrollTop","scrollHeight","offsetHeight","target","style","height","resize","onSubmit","event","preventDefault","formData","FormData","entries","Object","fromEntries","startRow","Number","min","max","placeholder","ref","onScroll","map","key","connect","dispatch","bindActionCreators","Table","App","Boolean","window","location","hostname","match","middleware","thunk","store","createStore","reducer","applyMiddleware","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd30b242.chunk.js","sourcesContent":["import { FETCH_PETS, FETCH_ADDITIONAL_PETS } from '../../constants';\n\nconst initialState = {\n  data: [],\n  lastFetchedPet: null,\n};\n\nexport default function auth(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_PETS:\n      return { ...action.pets };\n    case FETCH_ADDITIONAL_PETS:\n      return {\n        data: [...state.data, ...action.pets.data],\n        lastFetchedPet: action.pets.lastFetchedPet,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport pets from './pets';\n// We would import here all the other data models in our app and combine them into a rootReducer\nconst rootReducer = combineReducers({ pets });\n\nexport default rootReducer;\n","export const FETCH_PETS = 'FETCH_PETS';\nexport const FETCH_ADDITIONAL_PETS = 'FETCH_ADDITIONAL_PETS';\nexport const ROWS_PER_FETCH = 50;\n","// Generates 1 million rows of dummy data\nconst generateDummyData = () => {\n  const dummyData = [];\n\n  for (let i = 0; i < 1000000; i++) {\n    const rowNumber = i + 1;\n    dummyData.push({ id: rowNumber, value: `My pet number ${rowNumber}` });\n  }\n\n  return dummyData;\n};\n\nconst dummyData = generateDummyData();\n\n// Fetch rows from our dummy data\nconst fetchPets = (start, amount) => {\n  return dummyData.slice(start - 1, start + amount - 1);\n};\n\nfunction throttle(callback, delay) {\n  let timeOut = false;\n\n  return function () {\n    if (!timeOut) {\n      callback.call(this);\n\n      timeOut = true;\n      setTimeout(function () {\n        timeOut = false;\n      }, delay);\n    }\n  };\n}\n\nconst resize = (target) => {\n  target.style.height = 'auto';\n  target.style.height = `${target.scrollHeight}px`;\n};\n\nexport { fetchPets, throttle, resize };\n","import { ROWS_PER_FETCH, FETCH_PETS, FETCH_ADDITIONAL_PETS } from '../../constants';\nimport { fetchPets as fetchPetsData } from '../../helpers';\n\nexport const fetchPets = (start, amount = ROWS_PER_FETCH, preserveStore = false) => {\n  const data = fetchPetsData(start, amount);\n\n  const pets = {\n    data,\n    lastFetchedPet: start + ROWS_PER_FETCH,\n  };\n\n  return {\n    type: preserveStore ? FETCH_ADDITIONAL_PETS : FETCH_PETS,\n    pets,\n  };\n};\n","import React, { memo } from 'react';\n\nconst TableRow = ({ pet, handleRowOnchange }) => {\n  return (\n    <div className='table-row'>\n      <textarea\n        className='table-input'\n        rows='1'\n        onChange={handleRowOnchange}\n        name={`input-${pet.id}`}\n        defaultValue={pet.value}\n      />\n    </div>\n  );\n};\n\nexport default memo(TableRow);\n","import React, { createRef, useEffect, memo } from 'react';\nimport TableRow from './TableRow';\nimport { throttle, resize } from '../helpers';\nimport '../css/Table.css';\n\nconst Table = (props) => {\n  const { actions, pets } = props;\n  const { fetchPets } = actions;\n  const { data, lastFetchedPet } = pets;\n  const tableRef = createRef();\n\n  // Initial load of data\n  useEffect(() => {\n    fetchPets(1);\n  }, [fetchPets]);\n\n  // Throttle the scroll handler so it only can be called once every 100ms to prevent killing performance\n  const handleInfiniteScroll = throttle(() => {\n    const { scrollTop, scrollHeight, offsetHeight } = tableRef.current;\n    const offset = scrollHeight - scrollTop - offsetHeight;\n    const offsetPercentage = 100 - (offset / scrollHeight) * 100;\n    if (offsetPercentage >= 85) {\n      fetchPets(lastFetchedPet + 1, 50, true);\n    }\n  }, 100);\n\n  const jumpToRow = (row) => {\n    fetchPets(row);\n    tableRef.current.scrollTop = 0;\n  };\n\n  const handleJumpToRowInput = (event) => {\n    event.preventDefault();\n    const formData = new FormData(event.target).entries();\n    const data = Object.fromEntries(formData);\n    const startRow = Number(data['jump-to-row-input']);\n\n    jumpToRow(startRow);\n  };\n\n  const handleRowOnchange = ({ target }) => {\n    resize(target);\n    // Do things with the input value\n  };\n\n  return (\n    <div className='table-container'>\n      <form onSubmit={handleJumpToRowInput}>\n        <input\n          type='number'\n          min='1'\n          max='1000000'\n          name='jump-to-row-input'\n          className='jump-to-row-input'\n          placeholder='Jump to a row'\n        />\n        <button className='submit-button' type='submit'>\n          GO\n        </button>\n      </form>\n      <div className='table' ref={tableRef} onScroll={handleInfiniteScroll}>\n        {data.map((pet) => (\n          <TableRow key={pet.id} pet={pet} handleRowOnchange={handleRowOnchange} />\n        ))}\n      </div>\n      <span className='total-rows'>Total rows: 1000000</span>\n    </div>\n  );\n};\n\nexport default memo(Table);\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchPets } from '../store/actions';\nimport Table from '../components/Table';\n\nconst mapStateToProps = (state) => ({\n  pets: state.pets,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators({ fetchPets }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport Table from './containers/Table';\nimport './css/App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducer from './store/reducers';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './css/index.css';\n\n// thunk isn't needed in this challenge but it's what I would use to handle async actions\nconst middleware = [thunk];\n\nif (process.env.NODE_ENV !== 'production') {\n  middleware.push(createLogger());\n}\n\nconst store = createStore(reducer, applyMiddleware(...middleware));\n\nrender(\n  <Provider store={store}>\n    <App />,\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}